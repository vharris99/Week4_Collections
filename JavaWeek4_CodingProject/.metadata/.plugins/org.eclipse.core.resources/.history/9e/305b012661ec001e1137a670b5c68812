package week4_CodingProject;

import java.lang.reflect.Array;

public class Week4_CodingProject {

	public static void main(String[] args) {
		// 1.) Create an Array of int called ages that contains the following values: 3, 9, 23, 64, 2, 8, 28, 93.
		int[] ages = {3, 9, 23, 64, 2, 8, 28, 93};
		
		/* 1a.) Programmatically subtract the value of the first element in the Array from the value in
		 * the last element of the Array (i.e. do not use ages[7] in your code). Print the result to the
		 * console.
		 */
		System.out.println(ages[ages.length - 1] - ages[0]);
		
		
		/* 1b.) Create a new array of int called ages2 with 9 elements (ages2 will be longer than the ages array, 
		 * and have more elements).
		 */
		int[] ages2 = {5, 3, 10, 41, 76, 1, 20, 18, 9};
		// 1b.i. Make sure that there are 9 elements of type int in this new array. 
		
		/* 1b.ii.) Repeat the subtraction from Step 1.a. (Programmatically subtract the value of
		 *the first element in the new array ages2 from the last element of ages2).
		 */
		System.out.println(ages2[ages2.length - 1] - ages2[0]);
		
		// 1b.iii.) Show that using the index values for the elements is dynamic (works for arrays of different lengths).
		
		// 1c.) Use a loop to iterate through the Array and calculate the average age. Print the result to the console.
		int sum = 0;
		for (int age : ages2) {
			sum += age;
		}
		double average = sum / ages2.length;
		System.out.println(average);
		
		/* 2.) Create an Array of String called names that contains the following values: “Sam”, “Tommy”, “Tim”, 
		 * “Sally”, “Buck”, “Bob”.
		 */
		String[] names = {"Sam", "Tommy", "Tim", "Sally", "Buck", "Bob"};
		
		/* 2a.) Use a loop to iterate through the Array and calculate the average number of letters per
		 * name. Print the result to the console.
		 */
		int totalLetters = 0;
		for (String name : names) {
			totalLetters += name.length();
		}
		double average2 = totalLetters / names.length;
		System.out.println(average2);
		
		/* 2b.) Use a loop to iterate through the Array again and concatenate all the names together,
		 * separated by spaces, and print the result to the console.
		 */
		StringBuilder concatNames = new StringBuilder();
		for (String name : names) {
			concatNames.append(name + " ");
		}
		System.out.println(concatNames.toString());
		
		// 3.) How do you access the last element of any Array?
		// array.length - 1
		
		// 4.) How do you access the first element of any Array?
		// array[0]
		
		/* 5.) Create a new Array of int called nameLengths. Write a loop to iterate over the previously
		 *created names Array and add the length of each name to the nameLengths Array.
		 */
		int[] nameLengths = new int [names.length]; //has the same length as the array names
		for (int i = 0; i < names.length; i++) {
			nameLengths[i] = names[i].length(); /*assigns the length of each 
			 									 *string in the names array to the 
			 									 *corresponding position in the 
			 									 *nameLengths array*/
		}
		
		/* 6.) Write a loop to iterate over the nameLengths Array and calculate the sum of all the elements in
		 * the Array. Print the result to the console.
		 */
		int sum3 = 0;
		for (int length : nameLengths) {
			sum3 += length;
		}
		System.out.println(sum3); //counts each character in the names array & prints the total
		
		// Implementations of Numbers 7-13
		
		// 7.) System.out.println(repeatWord("Hello", 3));
		
		// 8.) System.out.println(fullName(Michael, Jordan));
		
		/* 9.) 
		 * int[] list = {1, 2, 3, 4, 5, 6};
		 * System.out.println(sumGreaterThan100(list));
		 */
		
		/* 10.)
		 * double[] list2 = {1.2, 1.3, 1.4, 1.5, 1,6};
		 * System.out.println(avg(list2));
		 */
		
		/* 11.) 
		 * double[] list3 = {1.1, 1.2, 1.3, 1.4}; 
		 * double[] list4 = {2.1, 2.2, 2.3, 2.4};
		 * System.out.println(compareAvg(list3, list4));
		 */
		
		// 12.) System.out.println(willBuyDrink(false, 12.35));
		
		/* 13.) 
		 * double[] cost = {3.30, 3.50, 3.75, 4.15};
		 * int[] amount = {2, 3, 4, 6, };
		 * System.out.println(totalCostOfGroceries(cost, amount));
		 */
		
	}
	
	/* 7.) Write a method that takes a String, word, and an int, n, as arguments and returns the word
	 * concatenated to itself n number of times. (i.e. if I pass in “Hello” and 3, I expect the method to
	 * return “HelloHelloHello”).
	 */
	public static String repeatWord (String word, int n) {
		StringBuilder repeatedWord = new StringBuilder();
		for (int i = 0; i < n; i++) {
			repeatedWord.append(word);
		}
		return repeatedWord.toString();
	}
	
	/* 8.) Write a method that takes two Strings, firstName and lastName, and returns a full name (the
	 * full name should be the first and the last name as a String separated by a space).
	 */
	public static String fullName (String firstName, String lastName) {
		StringBuilder fullName = new StringBuilder(firstName);
		fullName.append(" " + lastName);

		return fullName.toString();
	}
	
	/* 9.) Write a method that takes an Array of int and returns true if the sum of all the ints in the Array
	 * is greater than 100.
	 */
	public static boolean sumGreaterThan100 (int[] integers) {
		int sum4 = 0;
		for (int integer : integers) {
			sum4 += integer;
		}
		return sum4 > 100;
	}
	
	// 10.) Write a method that takes an Array of double and returns the average of all the elements in the Array.
	public static double avg (double[] nums) {
		double sum5 = 0;
		for (double num : nums) {
			sum5 += num;
		}
		return sum5 / nums.length;
	}
	
	/* 11.) Write a method that takes two Arrays of double and returns true if the average of the
	 * elements in the first Array is greater than the average of the elements in the second Array.
	 */
	public static boolean compareAvg (double[] array1, double[] array2) {
		double sum1 = 0;
		double sum2 = 0;
		
		for (double num : array1) {
			sum1 += num;
		}
		for (double num : array2) {
			sum2 += num;
		}
		double avg1 = sum1 / array1.length;
		double avg2 = sum2 / array1.length;
		
		return avg1 > avg2;
	}
	
	/* 12.) Write a method called willBuyDrink that takes a boolean isHotOutside, and a double
	 * moneyInPocket, and returns true if it is hot outside and if moneyInPocket is greater than 10.50.
	 */
	public static boolean willBuyDrink (boolean isHotOutside, double moneyInPocket) {
		return isHotOutside && moneyInPocket > 10.50;
	}
	
	/* 13. Create a method of your own that solves a problem. In comments, write what the method
	 * does and why you created it.
	 */
	public static double totalCostOfGroceries (double[] itemPrices, int[] quantities) {
		double totalCost = 0.0;
		for (int i = 0; i < itemPrices.length; i++) {
			totalCost += itemPrices[i] * quantities[i];
		}
		return totalCost;
	/* The above method could be used to calculate the total cost of purchasing multiple items
	 * from the grocery store. The array, 'itemPrices', would contain the prices of each
	 * item, and the array 'quantities' would contain the amount being purchased of each item.
	 * The method iterates through each item, multiplies its price by its quantity, and then
	 * adds the result to the total cost. Finally, it returns the total cost of purchasing all
	 * items.
	 */
	}
	
	
	
}
